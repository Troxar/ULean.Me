Практика «Таймеры»

В этом задании вы напишите библиотеку для профилирования кода, то есть для измерения скорости работы отдельных методов. В реальности для поиска медленных частей программы чаще используют специальную программу — профилировщик. Например, встроенный профилировщик в Visual Studio или внешний профилировщик, такой как JetBrains dotTrace.
Но стандартные профилировщики подходят не всегда. Давайте сделаем свой с удобным программным интерфейсом на основе использования оператора using и интерфейса IDisposable.
Использование должно быть примерно такое:

var writer = new StringWriter();
using (var timer = Timer.Start(writer, "T1"))
{
    // do things 1
    using (timer.StartChildTimer("T2"))
    {
        // do things 2
        ...
    }
	
    using (timer.StartChildTimer("T3"))
    {
        // do things 3
        ...
    }
}

Таймер T1 должен оценивать время выполнения do things 1, 2, 3; T2 — do things 2; T3 — do things 3. Естественно, нужна поддержка произвольной вложенности.
Результаты должны записываться в StringWriter, переданный в корневой таймер, в таком формате:

T1                  : 600
    T2              : 250
    T3              : 300
    Rest            : 50

Более точно формат зафиксирован в модульных тестах. Кроме того, в стартовом коде дан метод для форматирования одной строчки отчета. Используйте его, чтобы проще было пройти проверки в тестах.
Идея задачи в том, чтобы на старте using начинать засекать время, а при вызове Dispose заканчивать засекать.
