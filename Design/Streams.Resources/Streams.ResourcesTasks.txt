Практика «Ресурсы»

Необходимость писать собственные стримы возникает не так уж и часто. Однако такие ситуации бывают.
Допустим, вы разрабатываете компьютерную игру использующую множество мелких файлов с картинками. И для оптимизации хотите хранить все мелкие файлы внутри одного большого и решили для этого использовать собственный формат файла.
Ваша задача — по известному формату написать стрим, который читает содержимое одного мелкого файла из большого. Более конкретно, ваш стрим должен получать в конструктор базовый стрим с содержимым большого файла, а также название мелкого файла. А чтение из вашего стрима должно возвращать содержимое мелкого файла.
Такой стрим удобен тем, что дальше его можно будет использовать во множестве стандартных функций, принимающих Stream, например, Bitmap.FromStream.

Формат большого файла

Большой файл состоит из последовательных секций. Секция содержит имя мелкого файла (Key) в кодировке ASCII и содержимое мелкого файла (Value) в виде произвольных байтов. Каждый Key и каждый Value (в том числе Value последней секции) должен заканчиваться разделителем (Separator) — двумя последовательными байтами 0 и 1.

<StreamDiagram.png>

Мелкие файлы тоже могут содержать внутри себя последовательность 0, 1. Чтобы отличать ее от разделителя, все нулевые байты в Key и Value должны представляться удвоенными нулями. Это демонстрируется на иллюстрации выше, а также в соответствующем модульном тесте.

Буферизация чтения

Дополнительное ограничение: из базового стрима нужно читать порциями ровно по 1024 байт. Это нужно, потому что для некоторых стримов слишком часто читать маленькие участки не эффективно — сам факт чтения несет дополнительные расходы, в некоторых случаях не зависящие от количества прочитанных байт. С другой стороны плохо читать все сразу, поскольку стрим может быть очень большой и не поместиться в памяти. Такая техника называется буферизация. Постарайтесь не реализовывать буферизацию вручную, а найдите для этого стандартный способ.
Детали формата можно посмотреть в конструкторе TestStream.
